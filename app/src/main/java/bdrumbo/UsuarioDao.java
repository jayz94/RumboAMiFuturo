package bdrumbo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import bdrumbo.Usuario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USUARIO".
*/
public class UsuarioDao extends AbstractDao<Usuario, String> {

    public static final String TABLENAME = "USUARIO";

    /**
     * Properties of entity Usuario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Correo = new Property(0, String.class, "correo", true, "CORREO");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Activo = new Property(3, Boolean.class, "activo", false, "ACTIVO");
        public final static Property UrlFoto = new Property(4, String.class, "urlFoto", false, "URL_FOTO");
        public final static Property ResultTest = new Property(5, String.class, "resultTest", false, "RESULT_TEST");
        public final static Property FechaCreacion = new Property(6, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
    };


    public UsuarioDao(DaoConfig config) {
        super(config);
    }
    
    public UsuarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USUARIO\" (" + //
                "\"CORREO\" TEXT PRIMARY KEY NOT NULL ," + // 0: correo
                "\"NOMBRE\" TEXT NOT NULL ," + // 1: nombre
                "\"PASSWORD\" TEXT," + // 2: password
                "\"ACTIVO\" INTEGER," + // 3: activo
                "\"URL_FOTO\" TEXT," + // 4: urlFoto
                "\"RESULT_TEST\" TEXT," + // 5: resultTest
                "\"FECHA_CREACION\" INTEGER);"); // 6: fechaCreacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USUARIO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        String correo = entity.getCorreo();
        if (correo != null) {
            stmt.bindString(1, correo);
        }
        stmt.bindString(2, entity.getNombre());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        Boolean activo = entity.getActivo();
        if (activo != null) {
            stmt.bindLong(4, activo ? 1L: 0L);
        }
 
        String urlFoto = entity.getUrlFoto();
        if (urlFoto != null) {
            stmt.bindString(5, urlFoto);
        }
 
        String resultTest = entity.getResultTest();
        if (resultTest != null) {
            stmt.bindString(6, resultTest);
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(7, fechaCreacion.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Usuario readEntity(Cursor cursor, int offset) {
        Usuario entity = new Usuario( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // correo
            cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // activo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // urlFoto
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // resultTest
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // fechaCreacion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Usuario entity, int offset) {
        entity.setCorreo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNombre(cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActivo(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setUrlFoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResultTest(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFechaCreacion(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Usuario entity, long rowId) {
        return entity.getCorreo();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Usuario entity) {
        if(entity != null) {
            return entity.getCorreo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
